name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build SDist
        run: pipx run build --sdist

      - name: Check metadata
        run: pipx run twine check dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install GCC 11 on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-11 gcc-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
          gcc --version
          g++ --version

      - name: Install Latest Clang on macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install llvm
          echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile
          clang++ --version

      - uses: pypa/cibuildwheel@v2.22
        if: matrix.os == 'ubuntu-latest'
        env:
          CC: gcc-11
          CXX: g++-11
          CIBW_ENVIRONMENT: CC=gcc-11 CXX=g++-11 CXXFLAGS="-std=c++20"
          CIBW_ENVIRONMENT_PASS_LINUX: CC CXX
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/nanoforte

    steps:
      - uses: actions/setup-python@v5
      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
